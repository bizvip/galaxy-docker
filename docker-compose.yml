version: "3.9"

services:
  #    kong:
  #        image: kong/kong-gateway:3.2.1.0
  #        ports:
  #            - "8000:8000"
  #            - "8443:8443"
  #            - "8001:8001"
  #            - "8444:8444"
  #        environment:
  #            KONG_DATABASE: "postgres"
  #            KONG_PG_HOST: "postgres"
  #            KONG_PG_USER: "kong"
  #            KONG_PG_PASSWORD: "kong"
  #            KONG_PG_DATABASE: "kong"
  ##        volumes:
  ##            - ./kong.yml:/usr/local/kong/declarative/kong.yml
  #        depends_on:
  #            - postgres
  #    postgres:
  #        image: postgres:13
  #        environment:
  #            POSTGRES_USER: "kong"
  #            POSTGRES_PASSWORD: "kong"
  #            POSTGRES_DB: "kong"
  nginx:
    build:
      context: .
    image: nginx:1.23.3
    restart: always
    networks:
      app_net:
        ipv4_address: 172.100.100.100
    ports:
      - "8000:80"
    #      - "8443:443"
    volumes:
      - ${WEB_ROOT}:/var/www/html/
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    depends_on:
      - php

  php:
    image: php_fpm:8.2.4
    #        build:
    #            context: /Users/dannylee/Documents/works/railway-admin
    #            dockerfile: ./phpfpm/Dockerfile
    restart: always
    volumes:
      - ${WEB_ROOT}:/var/www/html/
      - ./phpfpm/php.ini:/usr/local/etc/php/php.ini
      - ./phpfpm/conf.d/docker-php-ext-opcache.ini:/usr/local/etc/php/conf.d/docker-php-ext-opcache.ini
      - ./phpfpm/php-fpm.conf:/usr/local/etc/php-fpm.conf
      - ./phpfpm/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      app_net:
        ipv4_address: 172.100.100.110

  galaxy_serv:
    image: php_cli:8.2.4
    #    build:
    #      context: .
    #      dockerfile: ./images/hyperf/Dockerfile
    #    restart: no
    volumes:
      - ${SERV_ROOT}:/app/
      - ./phpcli/php.ini:/usr/local/etc/php/php.ini
      - ./phpcli/conf.d/docker-php-ext-opcache.ini:/usr/local/etc/php/conf.d/docker-php-ext-opcache.ini
    expose:
      - "8000"
    ports:
      - "8001:8000"
    networks:
      app_net:
        ipv4_address: 172.100.100.120
    command: [ "php","/app/bin/run","start" ]
    depends_on:
      - nacos
      - redis
      - mysql
      - elasticsearch

  redis:
    image: redis/redis-stack:latest
    restart: always
    ports:
      - "10040:6379"
      - "10041:8001"
    networks:
      app_net:
        ipv4_address: 172.100.100.130

  #    pgbouncer:
  #        image: bitnami/pgbouncer:latest
  #        volumes:
  #            - /path/to/init-scripts:/docker-entrypoint-initdb.d
  #        networks:
  #            app_net:
  #                ipv4_address: 172.100.100.150

  #  postgresql:
  #    image: postgres:15.2-alpine3.17
  #    volumes:
  #      - ./data/postgres-data:/var/lib/postgresql/data
  #      - pgdata:/var/lib/postgresql/data
  #    restart: always
  #    environment:
  #      POSTGRES_USER: 'postgres'
  #      POSTGRES_PASSWORD: 'fuck123sql'
  #      PGDATA: /var/lib/postgresql/data/pgdata
  #    #    ports:
  #    #      - "10080:5432"
  #    networks:
  #      app_net:
  #        ipv4_address: 172.100.100.88
  #
  #  pgadmin:
  #    image: dpage/pgadmin4:latest
  #    volumes:
  #      - ./data/pgadmin:/var/lib/pgadmin
  #    restart: always
  #    environment:
  #      PGADMIN_DEFAULT_EMAIL: 'a@a.com'
  #      PGADMIN_DEFAULT_PASSWORD: 'fuck123sql'
  #    ports:
  #      - "10088:80"
  #    networks:
  #      app_net:
  #        ipv4_address: 172.100.100.188

  #  CREATE USER 'root'@'%' IDENTIFIED BY 'fuck123sql';
  #  GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';
  #  FLUSH PRIVILEGES;
  mysql:
    image: bitnami/mysql
    volumes:
      #      - ./mysql/my.cnf:/etc/my.cnf
      #      - ./mysql/mysql-data:/var/lib/mysql
      - ./mysql/bitnami.my.cnf:/opt/bitnami/mysql/conf/my.cnf
      - ./data/mysql-data:/bitnami/mysql/data
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 'fuck123sql'
      MYSQL_ROOT_HOST: '%'
      MYSQL_MAX_CONNECTIONS: 200
    user: root
    ports:
      - "10030:3306"
    networks:
      app_net:
        ipv4_address: 172.100.100.170

  #    zinc:
  #        image: public.ecr.aws/zinclabs/zinc:latest
  #        restart: always
  #        environment:
  #            ZINC_FIRST_ADMIN_USER: 'root'
  #            ZINC_FIRST_ADMIN_PASSWORD: 'fuck123sql'
  #        ports:
  #            - "14080:4080"
  #        networks:
  #            app_net:
  #                ipv4_address: 172.100.100.90

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    environment:
      - discovery.type=single-node
      - ELASTICSEARCH_SECURITY_ENABLED=false
      - http.max_content_length=1gb
      - http.max_initial_line_length=16k
      - http.max_header_size=8kb
      - http.max_chunk_size=512mb
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./data/es-data:/usr/share/elasticsearch/data
    ports:
      - "10021:9200"
      - "10022:9300"
    networks:
      app_net:
        ipv4_address: 172.100.100.180

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "10020:5601"
    depends_on:
      - elasticsearch
    networks:
      app_net:
        ipv4_address: 172.100.100.190

  #  Etcd:
  #    image: bitnami/etcd:latest
  #    environment:
  #      - ALLOW_NONE_AUTHENTICATION=yes
  #      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
  #    ports:
  #      - "2379:2379"
  #      - "2380:2380"
  #    networks:
  #      app_net:
  #        ipv4_address: 172.100.100.120

  nacos:
    image: nacos/nacos-server:v2.1.2-slim
    ports:
      - "10010:8848"
    environment:
      MODE: standalone
    networks:
      app_net:
        ipv4_address: 172.100.100.200

volumes:
  pgdata:
  es_data:
    driver: local

networks:
  app_net:
    ipam:
      driver: default
      config:
        - subnet: 172.100.100.0/16
